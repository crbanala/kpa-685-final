# -*- coding: utf-8 -*-
"""create_train_val_test_split.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G9k5gEW9zAnysCRM7gJoHtv8EMpPlbWF
"""

from psutil import virtual_memory
ram_gb = virtual_memory().total / 1e9
print('Your runtime has {:.1f} gigabytes of available RAM\n'.format(ram_gb))

if ram_gb < 20:
  print('Not using a high-RAM runtime')
else:
  print('You are using a high-RAM runtime!')

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

FOLDERNAME = 'nlp_data'
assert FOLDERNAME is not None, "[!] Enter the foldername."

#Now that we've mounted your Drive, this ensures that
# the Python interpreter of the Colab VM can load
# python files from within it.
import sys
sys.path.append('/content/drive/My Drive/{}'.format(FOLDERNAME))

# %cd /content/drive/My\ Drive/$FOLDERNAME/

import json
 
with open('restaurant_reviews/res_reviews_final.json') as json_file:
  res_data = json.load(json_file)

with open('restaurant_reviews/hos_reviews_final.json') as json_file:
  hos_data = json.load(json_file)

len(res_data)

len(hos_data)

rev_count = 0
for bus in res_data.keys():
  rev_count += len(res_data[bus]['review_list'])
rev_count

filtered_res_data = {}
review_count = 0
for business in res_data.keys():
  reviews_list = res_data[business]['review_list'].copy()

  for review in reviews_list:
      review_count = len(review['text'].split('.'))
      if review_count > 15:
        reviews_list.remove(review)

  if len(reviews_list) >= 50:    
    filtered_res_data[business] = res_data[business].copy()
    filtered_res_data[business]['review_list'] = reviews_list.copy()

rev_count = 0
for bus in filtered_res_data.keys():
  rev_count += len(filtered_res_data[bus]['review_list'])
rev_count

filtered_hos_data = {}
review_count = 0
for business in hos_data.keys():
  reviews_list = hos_data[business]['review_list'].copy()

  for review in reviews_list:
      review_count = len(review['text'].split('.'))
      if review_count > 15:
        reviews_list.remove(review)

  if len(reviews_list) >= 50:    
    filtered_hos_data[business] = hos_data[business].copy()
    filtered_hos_data[business]['review_list'] = reviews_list.copy()

rev_count = 0
for bus in filtered_hos_data.keys():
  rev_count += len(filtered_hos_data[bus]['review_list'])
rev_count

print(len(filtered_res_data))
print(len(filtered_hos_data))

train = {}
val = {}
test = {}

for key in list(filtered_res_data.keys())[0:int(0.25*len(filtered_res_data))]:
  train[key] = filtered_res_data[key]

for key in list(filtered_hos_data.keys())[0:int(0.25*len(filtered_hos_data))]:
  train[key] = filtered_hos_data[key]

for key in list(filtered_res_data.keys())[int(0.25*len(filtered_res_data)):int(0.5*len(filtered_res_data))]:
  val[key] = filtered_res_data[key]

for key in list(filtered_hos_data.keys())[int(0.25*len(filtered_hos_data)):int(0.5*len(filtered_hos_data))]:
  val[key] = filtered_hos_data[key]

for key in list(filtered_res_data.keys())[int(0.5*len(filtered_res_data)):]:
  test[key] = filtered_res_data[key]

for key in list(filtered_hos_data.keys())[int(0.5*len(filtered_hos_data)):]:
  test[key] = filtered_hos_data[key]

train_rev_count = 0
for bus in train.keys():
  train_rev_count += len(train[bus]['review_list'])

val_rev_count = 0
for bus in val.keys():
  val_rev_count += len(val[bus]['review_list'])

test_rev_count = 0
for bus in test.keys():
  test_rev_count += len(test[bus]['review_list'])

print(train_rev_count)
print(val_rev_count)
print(test_rev_count)

with open('/content/drive/My Drive/nlp_data/review_dataset/train.json', 'w', encoding ='utf8') as json_file:
    json.dump(train, json_file)

with open('/content/drive/My Drive/nlp_data/review_dataset/val.json', 'w', encoding ='utf8') as json_file:
    json.dump(val, json_file)

with open('/content/drive/My Drive/nlp_data/review_dataset/test.json', 'w', encoding ='utf8') as json_file:
    json.dump(test, json_file)